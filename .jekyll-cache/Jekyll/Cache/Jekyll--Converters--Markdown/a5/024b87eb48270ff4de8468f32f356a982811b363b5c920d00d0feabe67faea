I"ð†<p>The more I use bash the more I find it interesting. Basically every time I encounter a useful bash commands or when I learn something new about a command, I write them down for future reference.</p>

<p>Quick links:</p>

<ul>
  <li><a href="#regex">Regular Expression</a></li>
  <li><a href="#globbing">File Globbing</a></li>
  <li><a href="#array">Bash Arrays</a></li>
  <li><a href="#find">find</a></li>
  <li><a href="#vim">vim</a></li>
  <li><a href="#grep">grep</a></li>
  <li><a href="#sed">sed</a></li>
  <li><a href="#head">head,tail</a></li>
  <li><a href="#others">Others</a></li>
  <li><a href="#Link">Useful Links</a></li>
</ul>

<p>Online references:</p>

<ul>
  <li><a href="http://www.tldp.org/LDP/GNU-Linux-Tools-Summary/html/book1.htm">GNU/Linux Command-Line Tools Summary</a></li>
</ul>

<h2 id="regular-expressions"><a name="regex"></a>Regular Expressions</h2>
<p>Regular expressions(REGEX) are sets of characters and/or <em>metacharacters</em> that <strong>match patterns</strong> â€”- <a href="http://tldp.org/LDP/abs/html/x17129.html">REGEX intro</a>.</p>

<p><a href="https://www.youtube.com/watch?v=sa-TUpSx1JA">Video tutorial</a></p>

<p>####Escapes: 
characters that have special meanning, to be escaped</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>.[<span class="o">{()</span><span class="se">\^</span><span class="nv">$|</span>?<span class="k">*</span>+
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="match-pattern">Match Pattern</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="nb">.</span> - any character except new line
<span class="se">\d</span> - Digit <span class="o">(</span>0-9<span class="o">)</span>
<span class="se">\D</span> - Not a Digit <span class="o">(</span>0-9<span class="o">)</span>
<span class="se">\w</span> - word Character <span class="o">(</span>a-z, A-Z, 0-9, _<span class="o">)</span>
<span class="se">\W</span> - Not work character
<span class="se">\s</span> - white spaces
<span class="se">\S</span> - not white space

<span class="c"># anchors, don't match any characters</span>
<span class="c"># match invisible positions</span>
<span class="se">\b</span> - Word Boundary
<span class="se">\B</span> - Not word Boundary
^  - beginning of a string
<span class="nv">$ </span>- end of string

<span class="c"># character set</span>
<span class="o">[</span>...]  <span class="c"># match any one character in set</span>
-  <span class="c"># specify range when used between number/letters</span>
<span class="o">[</span>^]  <span class="c"># not in the set </span>
|    <span class="c"># either or </span>
<span class="o">(</span> <span class="o">)</span>  <span class="c"># Group</span>
 
<span class="c"># quantifier</span>
<span class="k">*</span> - match 0 or more
+ - match 1 or more
? - match 0 or One
<span class="o">{</span>3<span class="o">}</span> - match exact number
<span class="o">{</span>3,4<span class="o">}</span> - match a range of numbers <span class="o">(</span>Minimum, Maximum<span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="lookaround-lookahead-and-lookbehind">lookaround: lookahead and lookbehind</h4>

<p>Lookaround is an <strong>assertion</strong> (like line start or end anchor). It actually matches with characters, but then give up the match, and <strong>only returns match or no match</strong>. It <strong>does not consume characters</strong> in the string.</p>

<p>Basic syntax:</p>

<ul>
  <li>lookahead:
    <ul>
      <li>positive lookahead: <code class="language-plaintext highlighter-rouge">(?=(regex))</code></li>
      <li>negative lookhead: <code class="language-plaintext highlighter-rouge">(?!(regex))</code></li>
    </ul>
  </li>
  <li>lookbehind:
    <ul>
      <li>positive: <code class="language-plaintext highlighter-rouge">(?&lt;=(regex))</code></li>
      <li>negative: <code class="language-plaintext highlighter-rouge">(?&lt;!(regex))</code></li>
    </ul>
  </li>
</ul>

<p>Example:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1">// match "book" with "the" after it</span>
<span class="n">book</span><span class="p">(</span><span class="o">?=</span><span class="p">.</span><span class="o">*</span><span class="n">the</span><span class="p">)</span>

<span class="c1">// match "book" with "the" before it</span>
<span class="p">(</span><span class="o">?&lt;=</span><span class="n">the</span><span class="p">.</span><span class="o">*</span><span class="p">)</span><span class="n">book</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="more-examples">More Examples:</h4>

<ul>
  <li>word boundary: <code class="language-plaintext highlighter-rouge">\bHe</code>, # He eHe</li>
  <li>character set: <code class="language-plaintext highlighter-rouge">a[de]c</code>, adc, aec</li>
  <li>dash for range: <code class="language-plaintext highlighter-rouge">[a-z0-9A-Z]</code></li>
  <li>not in set: <code class="language-plaintext highlighter-rouge">[^1-3]</code></li>
  <li>quantifier examples
    <ul>
      <li><code class="language-plaintext highlighter-rouge">\d{3}</code>: 123</li>
      <li><code class="language-plaintext highlighter-rouge">Mr\.?\s[A-Z]\w*</code>: Mr. Zeng, Mr Zeng</li>
    </ul>
  </li>
  <li>Group examples:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">(Mr|Mrs)\.?\s\w+</code>: Mr. Zeng, Mrs Zeng â€¦</li>
    </ul>
  </li>
</ul>

<h2 id="-file-globbing"><a name="globbing"></a> File Globbing</h2>
<p>File Globbing and REGEX can be confusing. REGEX is used in functions for <strong>matching text in files</strong>, while globbing is used by shells to <strong>match file/directory names</strong> using wildcards.</p>

<p>Wildcards (some in REGEX may also apply):</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">*</code>: match any string</li>
  <li><code class="language-plaintext highlighter-rouge">{}</code> is often used to extend list, eg: <br />
  <code class="language-plaintext highlighter-rouge">ls {a*,b*}</code> lists files starting with either <code class="language-plaintext highlighter-rouge">a</code> or <code class="language-plaintext highlighter-rouge">b</code>.</li>
  <li>[]: same as in REGEX</li>
</ul>

<h2 id="-bash-arrays"><a name="array"></a> Bash Arrays</h2>

<ul>
  <li>Arrays can be constructed using round brackets: <br />
<code class="language-plaintext highlighter-rouge">var=(item0 item1 item2)</code> or  <br />
<code class="language-plaintext highlighter-rouge">var=($(ls -d ./))</code></li>
  <li>To access items or change item values, we can use <code class="language-plaintext highlighter-rouge">var[index]</code>. Eg: <br />
<code class="language-plaintext highlighter-rouge">var[index]=new_value</code> <br />
<code class="language-plaintext highlighter-rouge">echo ${var[index]}</code> <br />
  Note that when <code class="language-plaintext highlighter-rouge">var</code> is an array, the name <code class="language-plaintext highlighter-rouge">var</code> actually only refers to <code class="language-plaintext highlighter-rouge">var[0]</code>. To refer to the whole array, need to use <code class="language-plaintext highlighter-rouge">var[@]</code> or <code class="language-plaintext highlighter-rouge">var[*]</code>.</li>
  <li>sub-array expansion:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">${var[*]:s_ind}</code>  gives the subarray starting from index <code class="language-plaintext highlighter-rouge">s_ind</code>.</li>
      <li><code class="language-plaintext highlighter-rouge">${var[@]:s_ind:l}</code> gives you the length <code class="language-plaintext highlighter-rouge">l</code> sub-array starting at index <code class="language-plaintext highlighter-rouge">s_ind</code>.</li>
      <li>Can also replace <code class="language-plaintext highlighter-rouge">@</code> with <code class="language-plaintext highlighter-rouge">*</code>.</li>
    </ul>
  </li>
</ul>

<h2 id="vim"><a name="vim"></a>vim</h2>

<ul>
  <li>In normal mode:	
  all keys are functional keys. Examples are:
  -<code class="language-plaintext highlighter-rouge">p</code>: paste
    <ul>
      <li><code class="language-plaintext highlighter-rouge">yy</code>: copy current row to clip board</li>
      <li><code class="language-plaintext highlighter-rouge">dd</code>: copy row to clip board and delete</li>
      <li><code class="language-plaintext highlighter-rouge">u (ctrl+R)</code>: undo (redo) changes</li>
      <li><code class="language-plaintext highlighter-rouge">hjkl</code>: left, down, right, up</li>
      <li><code class="language-plaintext highlighter-rouge">:help &lt;command&gt;</code>: get help on a <code class="language-plaintext highlighter-rouge">command</code> â€” vim open the command txt file</li>
      <li><code class="language-plaintext highlighter-rouge">:wq</code> or <code class="language-plaintext highlighter-rouge">:x</code>: <code class="language-plaintext highlighter-rouge">w</code> for save; <code class="language-plaintext highlighter-rouge">q</code> for quit</li>
      <li><code class="language-plaintext highlighter-rouge">:q!</code>: quit without saving</li>
    </ul>
  </li>
  <li>Insertion:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">o</code>: insert a new row after current row</li>
      <li><code class="language-plaintext highlighter-rouge">O</code>: insert a new row before current row</li>
      <li><code class="language-plaintext highlighter-rouge">a</code>: insert after cursor</li>
      <li><code class="language-plaintext highlighter-rouge">i</code>: insert at cursor</li>
    </ul>
  </li>
  <li>Cursor movement:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">0, :0</code>: beginning of row, page</li>
      <li><code class="language-plaintext highlighter-rouge">$, :$</code>: end of row, page</li>
      <li><code class="language-plaintext highlighter-rouge">^</code>: to first non-blank  character</li>
      <li><code class="language-plaintext highlighter-rouge">/pattern</code>: search for pattern (press <code class="language-plaintext highlighter-rouge">n</code> to go to next)</li>
      <li><code class="language-plaintext highlighter-rouge">H,M,L</code>: move cursor to top, middle and bottom of page</li>
      <li><code class="language-plaintext highlighter-rouge">Ctrl + E,Y</code>: scroll up, down</li>
      <li><code class="language-plaintext highlighter-rouge">Ctrl + u,d</code>: half page up, down</li>
      <li><code class="language-plaintext highlighter-rouge">w,W,e,E,b,B</code>: jump cursor by words</li>
    </ul>
  </li>
  <li><a href="http://vim.wikia.com/wiki/Using_tab_pages"><strong>tabs</strong></a>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">:tabedit file</code>, <code class="language-plaintext highlighter-rouge">:tabfind file</code>: open new tab</li>
      <li><code class="language-plaintext highlighter-rouge">gt</code>, <code class="language-plaintext highlighter-rouge">gT</code>: next, previous tab</li>
      <li><code class="language-plaintext highlighter-rouge">:tabonly</code>: close all other tabs</li>
      <li><code class="language-plaintext highlighter-rouge">:tabnew</code>: open empty new tab</li>
      <li>can use abreviations, such as <code class="language-plaintext highlighter-rouge">:tabe</code>, <code class="language-plaintext highlighter-rouge">:tabf</code>, â€¦</li>
      <li><strong><code class="language-plaintext highlighter-rouge">:Explorer</code></strong>: explore folder with vim</li>
    </ul>
  </li>
  <li><a href="http://vim.wikia.com/wiki/Search_and_replace"><strong>string substitution</strong></a>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">%s/pattern/replacement/g</code>: replace all occurrences</li>
      <li><code class="language-plaintext highlighter-rouge">s/pattern/replacement/g</code>: replace in current line</li>
      <li>flags:
        <ul>
          <li><code class="language-plaintext highlighter-rouge">g</code> for global</li>
          <li><code class="language-plaintext highlighter-rouge">c</code> for confirmation</li>
          <li><code class="language-plaintext highlighter-rouge">i</code> for case-insensitive</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Visual Mode</strong>
    <ul>
      <li>type <code class="language-plaintext highlighter-rouge">v</code> to enter visual mode</li>
      <li>move cursor to select text</li>
      <li><code class="language-plaintext highlighter-rouge">y</code>: copy</li>
    </ul>
  </li>
  <li>Others:		
  -<code class="language-plaintext highlighter-rouge">:syntax on/off</code> : turn on/off text-highlighting colorscheme
  -<code class="language-plaintext highlighter-rouge">:Explore .</code> or <code class="language-plaintext highlighter-rouge">:e .</code>: explore current folder</li>
</ul>

<h2 id="find"><a name="find"></a>find</h2>
<p>General syntax: 	
<code class="language-plaintext highlighter-rouge">find path -name **** -mtime +1 -newer 20160621 -size +23M ...</code> 	
We will introduce each of above parameters and some more in this section:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">find ./ -name "*.txt"</code> : searching by name</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">find ./ -type d -name "*LZ*"</code>: specify target type, <code class="language-plaintext highlighter-rouge">d</code> for directory, <code class="language-plaintext highlighter-rouge">f</code> for file.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">find ./ -newerct 20130323 (or a file) </code>:  	
  file created <code class="language-plaintext highlighter-rouge">ct</code> after the date (also could be a file). can also use <code class="language-plaintext highlighter-rouge">newer</code> just for modified time</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">find ./ -mtime (-ctime, -atime) +n </code>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">m</code> for modified time</li>
      <li><code class="language-plaintext highlighter-rouge">c</code> for creation time</li>
      <li><code class="language-plaintext highlighter-rouge">a</code> for access time</li>
      <li><code class="language-plaintext highlighter-rouge">+n</code> for greater than n days, similarly <code class="language-plaintext highlighter-rouge">-n</code> for within n days. Can also change measures</li>
      <li>can also use <code class="language-plaintext highlighter-rouge">amin, cmin, mmin</code> for minutes</li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">find ./ -name "PowerGod*"  -maxdepth 3</code>:  <br />
  set maximum searching depth in this directory; similarly use <code class="language-plaintext highlighter-rouge">mindepth</code> to set minimum searching depth</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-iname</code> : to ignore case</p>
  </li>
  <li>piping results found: 	
  <code class="language-plaintext highlighter-rouge">-exec cp {} ~/LZfolder/  \;</code>: this command will copy the finded files to path <code class="language-plaintext highlighter-rouge">~/LZfolder/</code>
    <ul>
      <li>finded file will be placed in the position of <code class="language-plaintext highlighter-rouge">{}</code> and execute the command</li>
    </ul>
  </li>
</ul>

<h2 id="grep"><a name="grep"></a>grep</h2>
<p><code class="language-plaintext highlighter-rouge">grep</code> is used for searching lines in a file with certain pattern strings. 	
General formula: <code class="language-plaintext highlighter-rouge">grep pattern filename</code>  <br />
There are rich parameters you can specify:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">grep abc$ file</code>: match the end of a string</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">grep ^F file</code>: match the beginning of string</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">grep -w over file</code>: grep for words. 	
  In this example, words such as <code class="language-plaintext highlighter-rouge">overdue, moreover</code> would be skipped.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-A3</code>: also show 3 lines after the lines found</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-B3</code>: show 3 lines before found lines</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-C3</code>: show 3 lines before and after</p>
  </li>
  <li>
    <p><strong>logical grep</strong>:</p>
    <ul>
      <li>OR grep:  <code class="language-plaintext highlighter-rouge">grep pattern1|pattern2 filename</code></li>
      <li>AND grep: <code class="language-plaintext highlighter-rouge">grep pattern1.*pattern2 filename</code></li>
      <li>NOT grep: <code class="language-plaintext highlighter-rouge">grep -v pattern filename</code> <br />
where <code class="language-plaintext highlighter-rouge">-v</code> stands for invert match</li>
    </ul>
  </li>
</ul>

<h2 id="sed"><a name="sed"></a>sed</h2>

<p><code class="language-plaintext highlighter-rouge">sed</code> is short for <em>Stream EDitor</em>	
General formula: 
<code class="language-plaintext highlighter-rouge">sed 's/RegEx/replacement/g'  file</code>
which will do the work of replacing <code class="language-plaintext highlighter-rouge">RegEx</code> with <code class="language-plaintext highlighter-rouge">replacement</code>.</p>

<ul>
  <li>the separator <code class="language-plaintext highlighter-rouge">/</code> could be replaced by something like <code class="language-plaintext highlighter-rouge">_, |</code>
    <ul>
      <li>eg: <code class="language-plaintext highlighter-rouge">sed 's | age | year | ' file</code>, and would still work.</li>
    </ul>
  </li>
  <li>
    <p>simple back referencing, eg:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>  <span class="nv">$echo</span> what | <span class="nb">sed</span> <span class="s1">'s/wha/&amp;&amp;&amp;/'</span>  <span class="c"># input</span>
  whawhawhat <span class="c"># output</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p>more on back referencing, eg:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>  <span class="nb">echo </span>2014-04-01 | <span class="nb">sed</span> <span class="s1">'s/\(....\)-\(..\)-\(..\)/\1+	\2+\3/'</span>
  2014+04+01
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<p>Things in <code class="language-plaintext highlighter-rouge">\(...\)</code> are referred. A dot $\cdot$ in Regex can signify any character. Useful to use dots to describe patterns.</p>

<ul>
  <li>you can also <code class="language-plaintext highlighter-rouge">sed</code> multiple patterns separated by <code class="language-plaintext highlighter-rouge">;</code>, eg:
  <code class="language-plaintext highlighter-rouge">sed s/pattern1/replace1/;s/pattern2/replace2/g  &lt; file</code></li>
</ul>

<h2 id="-head-tail"><a name="head"></a> head, tail</h2>

<h2 id="shell-scripting">Shell scripting</h2>

<h3 id="debugging">Debugging:</h3>
<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">bash (or sh) -v script.sh</code> : displays each command as the program proceeds</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">bash (or sh) -x script.sh</code> : displays values of variables as program runs</p>
  </li>
</ul>

<h2 id="-others"><a name="others"></a> Others</h2>

<h3 id="boolean-value"><strong>Boolean value</strong></h3>
<p>You can try : <code class="language-plaintext highlighter-rouge">false; echo $?</code> The output is <code class="language-plaintext highlighter-rouge">1</code>, which means in bash shell: <br />
<code class="language-plaintext highlighter-rouge">1</code> for <code class="language-plaintext highlighter-rouge">false</code> <br />
<code class="language-plaintext highlighter-rouge">0</code> for <code class="language-plaintext highlighter-rouge">true</code></p>

<h3 id="different-parenthesis-and-brackets"><strong>Different parenthesis and brackets</strong></h3>
<p>See  <a href="http://stackoverflow.com/questions/2188199/how-to-use-double-or-single-bracket-parentheses-curly-braces">Parenthesis difference</a>.</p>

<ul>
  <li><strong>Double parenthesis</strong> (arithmetic operator) :
    <ul>
      <li><code class="language-plaintext highlighter-rouge">((  expr ))</code> : enables the usage of  things like <code class="language-plaintext highlighter-rouge">&lt;, &gt;, &lt;=</code> etc.</li>
      <li><code class="language-plaintext highlighter-rouge">echo $(( 5 &lt;= 3 ))</code>, and we get <code class="language-plaintext highlighter-rouge">0</code></li>
      <li>arithmetic operator interprets <code class="language-plaintext highlighter-rouge">1</code> as <code class="language-plaintext highlighter-rouge">true</code>, and <code class="language-plaintext highlighter-rouge">0</code> as <code class="language-plaintext highlighter-rouge">false</code>, which is different from the <code class="language-plaintext highlighter-rouge">test</code> command</li>
    </ul>
  </li>
</ul>

<h3 id="braces"><strong>Braces</strong></h3>
<ul>
  <li>Used for <strong>parameter expansion</strong>. Can create lists which are often used in loops, eg:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span><span class="nb">echo</span> <span class="o">{</span>00..8..2<span class="o">}</span> 
00 02 04 06 08 
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="single-and-double-square-brackets"><strong>Single and double square brackets</strong></h3>
<p>Much of below is from <a href="http://stackoverflow.com/questions/3427872/whats-the-difference-between-and-in-bash">bash brackets</a>, and <a href="http://www.ibm.com/developerworks/library/l-bash-test/">bash test functions</a>.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">[ expression ]</code> is the same as <code class="language-plaintext highlighter-rouge">test expression</code>. eg: <br />
  <code class="language-plaintext highlighter-rouge">test -e "$HOME" </code> same as <code class="language-plaintext highlighter-rouge">[ -e "$HOME" ]</code> <br />
and both of them requires careful handling of escaping characters.</p>
  </li>
  <li>
    <p>use <code class="language-plaintext highlighter-rouge">-a, -o</code> or <code class="language-plaintext highlighter-rouge">||, &amp;&amp;</code> for group testing. eg:</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c"># the following are the same</span>
<span class="nv">$ </span><span class="nb">test</span> <span class="nt">-e</span> <span class="s2">"file1"</span> <span class="nt">-a</span> <span class="nt">-d</span> <span class="s2">"file2"</span>
<span class="nv">$ </span><span class="nb">test</span> <span class="nt">-e</span> <span class="s2">"file1"</span> <span class="o">&amp;&amp;</span> <span class="nb">test</span> <span class="nt">-d</span> <span class="s2">"file2"</span>
<span class="nv">$ </span><span class="o">[</span> <span class="nt">-e</span> <span class="s2">"file1"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="nt">-d</span> <span class="s2">"file2"</span> <span class="o">]</span>
<span class="nv">$ </span><span class="o">[</span> <span class="nt">-e</span> <span class="s2">"file1"</span> <span class="nt">-a</span> <span class="s2">"file2"</span> <span class="o">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Note that <code class="language-plaintext highlighter-rouge">[ expr1 ] -a [ expr2 ]</code>, <code class="language-plaintext highlighter-rouge">[ expr1 &amp;&amp; expr2 ]</code> results in error.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">[[  expression ]]</code> allows you to use more natural syntax for file and string comparisons. If you want to compare number, itâ€™s more common to use double brackets <code class="language-plaintext highlighter-rouge">(( ))</code>. <br />
      eg. <code class="language-plaintext highlighter-rouge">[[ -e "file1" &amp;&amp; -e "file2" ]]</code>. <br />
      <code class="language-plaintext highlighter-rouge">[[ ]]</code> doesnâ€™t support <code class="language-plaintext highlighter-rouge">-a, -o</code> inside.</li>
</ul>

<h3 id="quotes"><strong>Quotes</strong></h3>
<p>Things inside the same quote are considered as one variable.</p>

<ul>
  <li>Single quotes: preserves whatever inside</li>
  <li>
    <p>Double quotes: do not preserve words involving <code class="language-plaintext highlighter-rouge">$ or \</code> and etc.</p>

    <p>See <a href="http://stackoverflow.com/questions/6697753/difference-between-single-and-double-quotes-in-bash">Quotes difference</a> for more.</p>
  </li>
</ul>

<h3 id="environment-variables"><strong>Environment Variables</strong></h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">$PS1</code>: controls shell prompt</li>
  <li><code class="language-plaintext highlighter-rouge">$PATH</code>: when shell receives non-builtin command, it goes into <code class="language-plaintext highlighter-rouge">$PATH</code> to look for it.</li>
  <li><code class="language-plaintext highlighter-rouge">$HOME</code>: home directory</li>
</ul>

<h3 id="easy-command-substitute"><strong>Easy command substitute</strong></h3>
<p>Say my previous command is <code class="language-plaintext highlighter-rouge">vim project.txt</code>. Now I want to <code class="language-plaintext highlighter-rouge">open</code> this file instead of using <code class="language-plaintext highlighter-rouge">vim</code>. Then I can simply input:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span><span class="o">!</span>vim:s/vim/open   
</pre></td></tr></tbody></table></code></pre></div></div>
<p>where <code class="language-plaintext highlighter-rouge">$</code> is the shell prompt. Basically this is performing <code class="language-plaintext highlighter-rouge">sed</code> on whatever the results are from <code class="language-plaintext highlighter-rouge">!vim</code>.</p>

<h3 id="redirection"><strong>Redirection</strong></h3>
<p>Bash shell has 3 basic streams: <code class="language-plaintext highlighter-rouge">input(0)</code>, <code class="language-plaintext highlighter-rouge">output(1)</code>, and <code class="language-plaintext highlighter-rouge">error(2)</code>. We can use <code class="language-plaintext highlighter-rouge">#number&gt;</code> to redirect them to somewhere else, eg:</p>

<ul>
  <li>Input redirection:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">&lt;</code> or <code class="language-plaintext highlighter-rouge">0&lt;</code></li>
      <li><code class="language-plaintext highlighter-rouge">command &lt;&lt; EOF</code>, and then manually input argument file, using <code class="language-plaintext highlighter-rouge">EOF</code> to end inputting (or use <code class="language-plaintext highlighter-rouge">ctrl + D</code>). <code class="language-plaintext highlighter-rouge">&lt;&lt;</code> is <code class="language-plaintext highlighter-rouge">here document</code> symbol.</li>
      <li><code class="language-plaintext highlighter-rouge">command &lt;&lt;&lt; string</code> : itâ€™s <code class="language-plaintext highlighter-rouge">here string</code> symbol. Can input a one row string argument.</li>
    </ul>
  </li>
  <li>output redirection:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">&gt;</code> or <code class="language-plaintext highlighter-rouge">1&gt;</code>: redirect output</li>
      <li><code class="language-plaintext highlighter-rouge">2&gt;</code>: redirect error log</li>
      <li><code class="language-plaintext highlighter-rouge">2&gt;1&amp;</code> : direct stderr to stdout stream, copy where stdout goes. And <code class="language-plaintext highlighter-rouge">1&gt;2&amp;</code> means vice versa. Here the <code class="language-plaintext highlighter-rouge">&gt;&amp;</code> is a syntax to pipe one stream to another.</li>
      <li><code class="language-plaintext highlighter-rouge">&amp;&gt;  filename</code>: join stdout and stderr in one stream, and put in a file.</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="c"># input redirection</span>
<span class="nv">$ </span>./myprog &lt; file1.txt
<span class="c"># output and err redirection</span>
<span class="nv">$ </span>./myprog arg1 <span class="o">&gt;</span> file.out
<span class="nv">$ </span>./myprog arg1 2&gt; file.err
<span class="nv">$ </span>./myprog arg1 &amp;&gt; out_and_err
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>Want no output <br />
Use <code class="language-plaintext highlighter-rouge">command &gt; /dev/null 2&gt;&amp;1</code></li>
</ul>

<h3 id="bash_profile-profile-and-bashrc">~/.bash_profile, ~/.profile and ~/.bashrc</h3>
<p>These are files where you can personalize commands to be executed upon shell login.</p>

<p>A bash shell would look for <code class="language-plaintext highlighter-rouge">~/.bash_profile</code> first. If it does not exist, it executes <code class="language-plaintext highlighter-rouge">~/.profile</code>.</p>

<p>When you start a shell in an existing session (such as screen), you get an interactive, non-login shell. That shell may read configurations in <code class="language-plaintext highlighter-rouge">~/.bashrc</code>.</p>

<p>See discussions:  <br />
<a href="http://unix.stackexchange.com/questions/38175/difference-between-login-shell-and-non-login-shell">login, non-login</a> <br />
<a href="http://superuser.com/questions/183870/difference-between-bashrc-and-bash-profile">different startup files</a></p>

<h3 id="command-substitution"><strong>Command substitution</strong></h3>
<p>If we want to use the output of <code class="language-plaintext highlighter-rouge">command 1</code> in a sentence, we can do it in the following two ways:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>... ...  <span class="sb">`</span><span class="nb">command </span>1<span class="sb">`</span> ... ... <span class="c">#  method 1   </span>
... ... <span class="si">$(</span><span class="nb">command </span>1<span class="si">)</span>  ... ... <span class="c"># method 2   </span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="resolve-symbolic-links">Resolve symbolic links</h3>
<p>Say <code class="language-plaintext highlighter-rouge">courses</code> is a symbolic link I created. If I <code class="language-plaintext highlighter-rouge">cd</code> this link, and then print working directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span><span class="nb">cd </span>courses 
<span class="nv">$ </span><span class="nb">pwd</span>
/Users/lizeng/paths/courses
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Itâ€™s showing the symbolic path, not the absolute path. To get the absolute path, we can resolve the link through:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span><span class="nb">pwd</span> <span class="nt">-P</span> 
/Users/lizeng/Google Drive/Yale/courses

<span class="c"># same also works for many other commands</span>
<span class="nv">$ </span><span class="nb">cd </span>courses<span class="p">;</span> <span class="nb">cd</span> ..<span class="p">;</span> <span class="nb">pwd</span>
/Users/lizeng/paths 
<span class="nv">$ </span><span class="nb">cd </span>courses<span class="p">;</span> <span class="nb">cd</span> <span class="nt">-P</span> ..<span class="p">;</span><span class="nb">pwd</span> 
/Users/lizeng/Google Drive/Yale
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">-P</code> here stands for <code class="language-plaintext highlighter-rouge">physical</code> (directory)</p>

<h2 id="useful-links"><a name="Link">Useful Links</a></h2>
<ul>
  <li><a href="https://linode.com/docs/tools-reference/linux-users-and-groups/"><strong>File permission</strong> explained</a></li>
</ul>
:ET