I"†—<p>Pakcage <em><strong>Rcpp</strong></em> allows you to use <em>C++</em> or <em>C</em> code in an R environment. Itâ€™s a great tool to enhance speed of your program, at the price of longer programming and harder debugging. But when it finally works out, itâ€™s totally worth it.</p>

<p>On <em>stackoverflow</em> (as of date 2016/9/22), number of <strong>r</strong> tagged questions is 153199, while number of <strong>rcpp</strong> tagged questions is 1193. Only 1% of the questions asked are about Rcpp. This implies the fact that not that many R users are also Rcpp users. The lack in population leads to incomplete documentation, and limited references you can find when you get into trouble during Rcpp programming.</p>

<p>The goal of this documentation is to give a general introduction to Rcpp, use it as a framework for future update with more details. We assume knowledge of both C++ and R programming, so there will be no introduction about them.</p>

<h3 id="collection-of-online-references">Collection of online references</h3>
<p>You might find the following web pages useful:</p>
<ul>
  <li>Hadley Wickhamâ€™s Advanced R: <a href="http://adv-r.had.co.nz/Rcpp.html">Chapter from Advanced R</a></li>
  <li>Online gitbook: <a href="https://www.gitbook.com/book/teuder/introduction-to-rcpp/details">Introduction to Rcpp</a></li>
  <li>The <em>Armadillo</em> library details, with introduction about all member functions: <a href="http://arma.sourceforge.net/docs.html">Armadillo Website</a></li>
  <li>Rcpp documentation: <a href="http://dirk.eddelbuettel.com/code/rcpp/html/index.html">Rcpp Version 0.12.7 Documentation</a></li>
  <li>Understanding Râ€™s C interface <a href="http://adv-r.had.co.nz/C-interface.html">C interface in R</a></li>
</ul>

<h2 id="two-ways-to-incorporate-c-functions">Two ways to incorporate C++ functions</h2>

<ul>
  <li><strong>Inline function definition</strong>: usage of <code class="language-plaintext highlighter-rouge">cppFunction()</code></li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="n">cppFunction</span><span class="p">(</span>
<span class="s">" int my_C_function (int x){</span><span class="err">
</span><span class="s">  int y=5;</span><span class="err">
</span><span class="s">  return  x+y;</span><span class="err">
</span><span class="s">}"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li><strong>Write .cpp source file</strong><br />
 You can also write <em>.cpp</em> source files outside and use<br />
 <code class="language-plaintext highlighter-rouge">sourceCpp("your_file_name.cpp")</code>
 to source the file. However, there are certain rules to be followed. A simple template is shown below:</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;Rcpp.h&gt;
</span><span class="n">using</span> <span class="n">namespace</span> <span class="n">Rcpp</span><span class="p">;</span>
<span class="c1">//[[Rcpp::export]]  /* to show that this function is to be exported to R */  </span>
<span class="cm">/* write your C++ function here */</span>
<span class="kt">int</span> <span class="nf">my_C_function</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
<span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="rcpp-data-structure">Rcpp Data Structure</h2>

<h3 id="numericvector">NumericVector</h3>
<ul>
  <li>Basics:</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre> <span class="n">NumericVector</span> <span class="nf">v</span> <span class="p">(</span><span class="mi">3</span><span class="p">);</span>  <span class="c1">// rep(0,3)</span>
 <span class="n">NumericVector</span> <span class="n">v</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">};</span>
 <span class="n">NumericVector</span> <span class="nf">v</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>  <span class="c1">// rep(5,3)</span>
 <span class="n">NumericVector</span> <span class="n">v</span> <span class="o">=</span> <span class="n">NumericVector</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
 <span class="c1">//</span>
 <span class="c1">// subsetting</span>
 <span class="n">v</span><span class="p">[</span><span class="n">u</span><span class="p">];</span> <span class="c1">// where u is a LogicalVector</span>
 <span class="c1">//</span>
 <span class="c1">//Use `clone()` function when you don't want your vector or matrix value to be changed:</span>
 <span class="n">NumericVector</span> <span class="n">v1</span><span class="o">=</span><span class="n">v2</span><span class="p">;</span> <span class="c1">// change of v1 will result in change of v2</span>
 <span class="n">NumericVector</span> <span class="n">v1</span><span class="o">=</span><span class="n">clone</span><span class="p">(</span><span class="n">v2</span><span class="p">);</span> <span class="c1">// v2 will not be changed, when v1 is changed</span>
 <span class="c1">//</span>
 <span class="c1">// member functions:</span>
  <span class="n">v</span><span class="p">.</span><span class="n">length</span><span class="p">();</span> <span class="c1">//  length of v</span>
 <span class="c1">//</span>
 <span class="c1">// Doing iterations:   </span>
 <span class="n">NumericVector</span><span class="o">::</span><span class="n">iterator</span> <span class="n">it</span><span class="p">;</span> <span class="c1">// 'it' is then a pointer to the head of the vector</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>What you get from logical vector subsetting <code class="language-plaintext highlighter-rouge">v[u]</code> is a pointer. To be able to use it, you need to wrap it up into whatever type you want it to have (eg. <code class="language-plaintext highlighter-rouge">as&lt;NumericVector&gt;(v[u])</code>)</p>

<h3 id="numericmatrix">NumericMatrix</h3>
<ul>
  <li>Basic</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="n">NumericMatrix</span> <span class="n">M</span><span class="p">;</span> <span class="c1">// multiple initiation methods as  NumericVector</span>
<span class="n">M</span><span class="p">.</span><span class="n">length</span><span class="p">();</span> <span class="c1">// total elements of M</span>
<span class="n">M</span><span class="p">.</span><span class="n">nrow</span><span class="p">(),</span> <span class="n">M</span><span class="p">.</span><span class="n">ncol</span><span class="p">()</span> <span class="c1">// returns row , column number</span>
<span class="n">M</span><span class="p">.</span><span class="n">row</span><span class="p">(</span><span class="n">i</span><span class="p">),</span><span class="n">M</span><span class="p">.</span><span class="n">col</span><span class="p">(</span><span class="n">j</span><span class="p">)</span> <span class="c1">// returns pointers to row i, col j</span>
<span class="n">NumericVector</span> <span class="n">y</span><span class="o">=</span> <span class="n">M</span><span class="p">(</span> <span class="n">_</span> <span class="p">,</span> <span class="n">i</span><span class="p">);</span> <span class="c1">// get ith column, M(_,i) itself is also a pointer</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>More operations of Matrix in  <em><strong>RcppArmadillo</strong></em> Section.</p>

<h3 id="dataframe">DataFrame</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">DataFrame</span> <span class="n">df</span> <span class="o">=</span> <span class="n">DataFrame</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">Named</span><span class="p">(</span><span class="s">"a1"</span><span class="p">)</span><span class="o">=</span><span class="n">v1</span><span class="p">,</span> <span class="n">_</span><span class="p">[</span><span class="s">"a2"</span><span class="p">]</span> <span class="o">=</span><span class="n">v2</span><span class="p">);</span><span class="err">}</span> <span class="c1">// OK to do without names</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="list">List</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">// names can be added as well following same routine as in DataFrame</span>
<span class="n">List</span> <span class="n">L</span> <span class="o">=</span> <span class="n">List</span><span class="o">::</span><span class="n">create</span> <span class="p">(</span><span class="n">v1</span><span class="p">,</span><span class="n">v2</span><span class="p">);</span> 
<span class="c1">// access elements by names</span>
<span class="kt">int</span> <span class="n">K</span> <span class="o">=</span>  <span class="n">Mylist</span><span class="p">[</span><span class="s">"var_name"</span><span class="p">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="use-r-functions">Use R Functions</h2>
<p>Example:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="c1">//example 1: use R function</span>
<span class="n">Function</span> <span class="nf">dnorm</span><span class="p">(</span><span class="s">"dnorm"</span><span class="p">);</span>
<span class="kt">double</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">dnorm</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">Named</span><span class="p">(</span><span class="s">"mean"</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="n">Named</span><span class="p">(</span><span class="s">"sd"</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="n">Named</span><span class="p">(</span><span class="s">"log"</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>

<span class="c1">//example 2: use function from global environment</span>
<span class="n">Environment</span> <span class="n">env</span><span class="o">=</span><span class="n">Environment</span><span class="o">::</span><span class="n">global_env</span><span class="p">();</span>
<span class="n">Function</span> <span class="nf">my_fun</span><span class="p">(</span><span class="s">"fun_in_glob"</span><span class="p">);</span> <span class="c1">// fun_in_glob() is a function defined existing in global env</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Transition from C++ to R takes a lot of time. Always try to find function supported by Rcpp or write your own function rather than refer functions from R package.</p>

<h2 id="linear-algebra-rcpparmadillo">Linear Algebra: <strong>RcppArmadillo</strong></h2>
<ul>
  <li>
    <p>Possible problems during installation and compilation: <a href="http://thecoatlessprofessor.com/programming/rcpp-rcpparmadillo-and-os-x-mavericks-lgfortran-and-lquadmath-error">-lgfortran and -lquadmath problem</a></p>
  </li>
  <li>When writing <em>RcppArmadillo</em> source files, use <code class="language-plaintext highlighter-rouge">#include &lt;RcppArmadillo.h&gt;</code> then <code class="language-plaintext highlighter-rouge">&lt;Rcpp.h&gt;</code> is spontaneously implied.</li>
  <li>
    <p>Include <code class="language-plaintext highlighter-rouge">using namespace arma;</code> to save the trouble of writing <code class="language-plaintext highlighter-rouge">arma::</code> everytime.</p>
  </li>
  <li>Basic variable types: <strong>arma::mat, arma::vec</strong></li>
</ul>

<h3 id="armamat">arma:mat</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="c1">// initialization</span>
<span class="n">arma</span><span class="o">::</span><span class="n">mat</span> <span class="n">M</span><span class="p">;</span> <span class="c1">// initializes a 0 size matrix</span>
<span class="n">arma</span><span class="o">::</span><span class="n">mat</span> <span class="nf">M</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span> <span class="c1">// a  by b matrix,  filled with 0.</span>
<span class="c1">//</span>
<span class="c1">//member functions</span>
<span class="n">M</span><span class="p">.</span><span class="n">n_rows</span><span class="p">,</span> <span class="n">M</span><span class="p">.</span><span class="n">n_cols</span> <span class="c1">//number of rows and columns</span>
<span class="n">M</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="c1">// returns number of elements</span>
<span class="n">M</span><span class="p">.</span><span class="n">print</span><span class="p">()</span> <span class="c1">//print the matrix  </span>
<span class="n">M</span><span class="p">.</span><span class="n">reshape</span><span class="p">(),</span> <span class="n">M</span><span class="p">.</span><span class="n">fill</span><span class="p">(),</span> <span class="n">M</span><span class="p">.</span><span class="n">ones</span><span class="p">(),</span> <span class="n">M</span><span class="p">.</span><span class="n">zeros</span><span class="p">()</span> <span class="c1">//</span>
<span class="n">M</span><span class="p">.</span><span class="n">t</span><span class="p">()</span><span class="c1">// transpose</span>
<span class="n">M</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">),</span> <span class="n">M</span><span class="p">.</span><span class="n">row</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="n">M</span><span class="p">.</span><span class="n">col</span><span class="p">(</span><span class="n">j</span><span class="p">),</span> <span class="n">M</span><span class="p">.</span><span class="n">row</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="c1">// accessing elements</span>
<span class="c1">//</span>
<span class="c1">//operators for M</span>
<span class="n">M</span> <span class="o">%</span> <span class="n">M</span><span class="p">,</span> <span class="n">M</span> <span class="o">/</span> <span class="n">M</span> <span class="c1">// element wise multiplication, division</span>
<span class="n">inv</span><span class="p">(</span><span class="n">M</span><span class="p">)</span> <span class="c1">// inverse</span>
<span class="n">M</span><span class="o">*</span><span class="n">M</span> <span class="c1">//matrix product;</span>
<span class="c1">//</span>
<span class="c1">// Matrix subsetting</span>
<span class="n">arma</span><span class="o">::</span><span class="n">mat</span> <span class="n">M2</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">rows</span><span class="p">(</span><span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">);</span> <span class="c1">// contiguous; use M.cols() for column subsetting</span>
<span class="n">arma</span><span class="o">::</span><span class="n">mat</span> <span class="n">M3</span><span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">submat</span><span class="p">(</span><span class="n">row_from</span><span class="p">,</span> <span class="n">col_from</span><span class="p">,</span> <span class="n">row_to</span><span class="p">,</span> <span class="n">col_to</span><span class="p">);</span> <span class="c1">// contiguous ; by both row and column</span>
<span class="c1">// non-contiguous</span>
<span class="c1">// access multiple rows by indices</span>
<span class="c1">// index_vec need to be uvec (Col&lt;uword&gt;) or urowvec (Col&lt;uword&gt;) type</span>
<span class="n">M</span><span class="p">.</span><span class="n">cols</span><span class="p">(</span><span class="n">index_vec</span><span class="p">),</span> <span class="n">M</span><span class="p">.</span><span class="n">rows</span><span class="p">(</span><span class="n">index_vec</span><span class="p">)</span> 

</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="armavec">arma::vec</h3>
<p><strong>arma::vec</strong> is also treated as <strong>arma::mat</strong> with only one column.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>	<span class="c1">// basics</span>
	<span class="n">arma</span><span class="o">::</span><span class="n">vec</span> <span class="n">V</span><span class="p">;</span>
	<span class="n">V</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="c1">// returns length of V</span>
	<span class="c1">//</span>
	<span class="c1">// vector subsetting</span>
	<span class="n">v</span><span class="p">.</span><span class="n">subvec</span><span class="p">(</span> <span class="n">from</span><span class="p">,</span>  <span class="n">to</span><span class="p">);</span> <span class="c1">// contiguous subsetting; from, to are index</span>
	<span class="c1">// non-contiguous</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="cube">Cube</h3>
<p>Cube is three dimensional array. Less often used than <strong>arma::mat, arma::vec</strong>, but also useful.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="c1">//construtors</span>
<span class="n">arma</span><span class="o">::</span><span class="n">cube</span> <span class="nf">x</span><span class="p">(</span><span class="n">n_row</span><span class="p">,</span> <span class="n">n_col</span><span class="p">,</span> <span class="n">n_slice</span><span class="p">);</span> <span class="c1">// all 0</span>
<span class="c1">//</span>
<span class="c1">// attributes</span>
<span class="n">x</span><span class="p">.</span><span class="n">n_cols</span><span class="p">,</span> <span class="n">x</span><span class="p">.</span><span class="n">n_rows</span><span class="p">,</span> <span class="n">x</span><span class="p">.</span><span class="n">n_slices</span> <span class="c1">// number of dimensions</span>
<span class="n">x</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="c1">// number of elements</span>
<span class="c1">//</span>
<span class="c1">// member</span>
<span class="n">x</span><span class="p">.</span><span class="n">slice</span><span class="p">(</span><span class="n">i</span><span class="p">);</span> <span class="c1">// mat of slice i</span>
<span class="n">x</span><span class="p">.</span><span class="n">slices</span><span class="p">(</span><span class="n">first_slice</span><span class="p">,</span> <span class="n">last_slice</span><span class="p">);</span> <span class="c1">// contiguous slices</span>
<span class="n">x</span><span class="p">.</span><span class="n">subcube</span><span class="p">(</span><span class="n">row1</span><span class="p">,</span><span class="n">col1</span><span class="p">,</span><span class="n">slice1</span><span class="p">,</span><span class="n">row2</span><span class="p">,</span><span class="n">col2</span><span class="p">,</span><span class="n">slice2</span><span class="p">);</span> <span class="c1">// contiguous subcube</span>
<span class="n">x</span><span class="p">.</span><span class="n">fill</span><span class="p">(</span><span class="kt">double</span> <span class="n">c</span><span class="p">);</span> <span class="c1">// fill the cube with c</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="shared-functions"><em>shared functions</em></h3>
<p>This section, I put in some useful functions mostly shared by both <em>arma::mat</em> and <em>arma::vec</em>, and some by <em>arma::cube</em>.</p>

<ul>
  <li><strong>Element-wise functions</strong>: <a href="http://arma.sourceforge.net/docs.html#misc_fns">element-wise</a>.</li>
  <li><strong>Constructors</strong>: <a href="http://arma.sourceforge.net/docs.html#constructors_mat">mat constructor</a> and <a href="http://arma.sourceforge.net/docs.html#adv_constructors_mat">mat advanced constructor</a>.</li>
  <li>others:</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre>	<span class="c1">// iterators</span>
	<span class="n">arma</span><span class="o">::</span><span class="n">vec</span><span class="o">::</span><span class="n">iterator</span> <span class="n">it</span><span class="p">;</span> <span class="c1">// arma::vec::const_iterator for read only</span>
	<span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">()</span> <span class="c1">// for vector</span>
	<span class="n">v</span><span class="p">.</span><span class="n">begin_row</span><span class="p">(</span><span class="n">row_number</span><span class="p">),</span> <span class="n">v</span><span class="p">.</span><span class="n">end_row</span><span class="p">(</span><span class="n">row_number</span><span class="p">)</span> <span class="c1">// for mat; column version similar  </span>
	<span class="c1">//</span>
	<span class="n">diagmat</span><span class="p">(</span> <span class="n">M</span> <span class="p">)</span> <span class="c1">// generate diagonal matrix from given matrix or vector</span>
	<span class="n">accu</span><span class="p">(</span><span class="n">M</span><span class="p">)</span>  <span class="c1">// accumulate sum of all elements in vector or matrix</span>
	<span class="c1">//</span>
	<span class="c1">//elements access</span>
	<span class="n">V</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="n">V</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="c1">// element i, for vector</span>
	<span class="n">M</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">),</span> <span class="n">M</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="c1">// for matrix</span>
	<span class="c1">//</span>
	<span class="c1">// initialization</span>
	<span class="n">ones</span><span class="p">(</span><span class="n">n_elem</span><span class="p">),</span> <span class="n">ones</span><span class="p">(</span><span class="n">n_rows</span><span class="p">,</span><span class="n">n_cols</span><span class="p">)</span> <span class="c1">// matrix filled with 1</span>
	<span class="n">ones</span><span class="o">&lt;</span><span class="n">vec_type</span><span class="o">&gt;</span><span class="p">(</span><span class="n">n_elem</span><span class="p">);</span> <span class="n">ones</span><span class="o">&lt;</span><span class="n">mat_type</span><span class="o">&gt;</span><span class="p">(</span><span class="n">dim1</span><span class="p">,</span> <span class="n">dim2</span><span class="p">)</span>
	<span class="n">randu</span><span class="o">&lt;</span><span class="n">type</span><span class="o">&gt;</span><span class="p">(</span><span class="n">dim1</span><span class="p">,</span> <span class="n">dim2</span><span class="p">,</span> <span class="n">dim3</span><span class="p">);</span> <span class="c1">//unif(0,1); type can be : vec, mat, cube</span>
	<span class="n">randu</span><span class="o">&lt;</span><span class="n">type</span><span class="o">&gt;</span><span class="p">(</span><span class="n">dim1</span><span class="p">,</span> <span class="n">dim2</span><span class="p">,</span> <span class="n">dim3</span><span class="p">);</span> <span class="c1">// N(0,1)</span>
	<span class="n">zeros</span><span class="o">&lt;</span><span class="n">vector_type</span><span class="o">/</span><span class="n">mat_type</span><span class="o">/</span><span class="n">cube_type</span><span class="o">&gt;</span><span class="p">(...);</span> <span class="c1">// initiation with 0s</span>
	<span class="c1">//others</span>
	<span class="p">.</span><span class="n">min</span><span class="p">();.</span><span class="n">max</span><span class="p">();</span> <span class="c1">// get minimum maximum</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>
    <p>Type conversion: <br />
  say you have an input of type <em>NumericMatrix x</em>, you can convert it with: <br />
  <code class="language-plaintext highlighter-rouge">arma::mat y= as&lt;arma::mat&gt;(x);</code></p>

    <p>To work in the opposite direction use <em>wrap</em> function :<br />
  <code class="language-plaintext highlighter-rouge">NumericVector x= wrap(y);</code></p>
  </li>
</ul>

<h3 id="useful-topics">useful topics</h3>
<ul>
  <li>use logical vector to access submatrix/subvector:</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="n">arma</span><span class="o">::</span><span class="n">mat</span> <span class="nf">matrix_sub</span><span class="p">(</span><span class="n">arma</span><span class="o">::</span><span class="n">mat</span> <span class="n">M</span><span class="p">,</span> <span class="n">LogicalVector</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
  <span class="c1">// b=1: select row</span>
  <span class="c1">// b=2: select column</span>
  <span class="n">arma</span><span class="o">::</span><span class="n">mat</span> <span class="n">out</span><span class="p">;</span>
  <span class="k">if</span><span class="p">(</span><span class="n">b</span><span class="o">==</span><span class="mi">2</span><span class="p">){</span>
    <span class="n">arma</span><span class="o">::</span><span class="n">colvec</span> <span class="n">z</span><span class="o">=</span><span class="n">as</span><span class="o">&lt;</span><span class="n">arma</span><span class="o">::</span><span class="n">colvec</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
    <span class="n">out</span><span class="o">=</span><span class="n">M</span><span class="p">.</span><span class="n">cols</span><span class="p">(</span><span class="n">find</span><span class="p">(</span><span class="n">z</span><span class="o">==</span><span class="mi">1</span><span class="p">));</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">b</span><span class="o">==</span><span class="mi">1</span><span class="p">){</span>
    <span class="n">arma</span><span class="o">::</span><span class="n">rowvec</span> <span class="n">z</span><span class="o">=</span><span class="n">as</span><span class="o">&lt;</span><span class="n">arma</span><span class="o">::</span><span class="n">rowvec</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
    <span class="n">out</span><span class="o">=</span><span class="n">M</span><span class="p">.</span><span class="n">rows</span><span class="p">(</span><span class="n">find</span><span class="p">(</span><span class="n">z</span><span class="o">==</span><span class="mi">1</span><span class="p">));</span>
  <span class="p">}</span>
  
  <span class="k">return</span> <span class="n">out</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>We first convert the logical vector <code class="language-plaintext highlighter-rouge">a</code> into <code class="language-plaintext highlighter-rouge">colvec</code> or <code class="language-plaintext highlighter-rouge">rowvec</code>, on which we can use the <code class="language-plaintext highlighter-rouge">find(expr)</code> function. <code class="language-plaintext highlighter-rouge">find</code> return the index (type <code class="language-plaintext highlighter-rouge">uvec</code>) where <code class="language-plaintext highlighter-rouge">expr</code> is true, and that index can be used to get submatrix.</p>

<p>For vector, the steps can be easier:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">// convert logical vector to uvec</span>
<span class="n">arma</span><span class="o">::</span><span class="n">uvec</span> <span class="n">q</span> <span class="o">=</span> <span class="n">as</span><span class="o">&lt;</span><span class="n">arma</span><span class="o">::</span><span class="n">uvec</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
<span class="c1">// use .elem() function to get subvector</span>
<span class="k">return</span> <span class="n">v</span><span class="p">.</span><span class="n">elem</span><span class="p">(</span><span class="n">find</span><span class="p">(</span><span class="n">q</span><span class="p">));</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>More on how to use find: <a href="http://arma.sourceforge.net/docs.html#find">find</a>.</p>

<h2 id="work-with-distributions">Work with Distributions</h2>
<p><em>Rcpp</em> provides many equivalents for R functions related to distributions, so you donâ€™t have to scratch your head to write your own, or refer to those R functions with the price of a speed slow down.</p>
<h5 id="uniform-distribution">Uniform distribution</h5>
<ul>
  <li><code class="language-plaintext highlighter-rouge">R::runif(double a, double b)</code> : uniform from <code class="language-plaintext highlighter-rouge">[a,b]</code></li>
</ul>

<h5 id="binomial-distribution">Binomial distribution</h5>
<ul>
  <li><code class="language-plaintext highlighter-rouge">R::dbinom(x, size, prob, log=0\1)</code>:expects 4 inputs<br />
  <code class="language-plaintext highlighter-rouge">R::qbinom(p,size,prob,lower.tail,log.p)</code>: expects 5 inputs<br />
  <code class="language-plaintext highlighter-rouge">R::rbinom(size,p)</code>: only generates one random value at a time; need to vectorize it if necessary<br />
  same parameters as in <em>R</em>. For parameter <em>log</em>, use <code class="language-plaintext highlighter-rouge">0/1</code> instead of <code class="language-plaintext highlighter-rouge">true/false</code>.</li>
</ul>

<h5 id="poisson-distribution">Poisson distribution</h5>

<h5 id="beta-distribution">Beta distribution</h5>
<ul>
  <li><code class="language-plaintext highlighter-rouge">R::dbeta(double x, double a, double b, int log)</code></li>
</ul>

<h5 id="gamma-distribution">Gamma distribution</h5>
<ul>
  <li><code class="language-plaintext highlighter-rouge">R::rgamma(double shape, double scale)</code> : it only takes scale rather than rate as input. There is also a vectorized version:
  <code class="language-plaintext highlighter-rouge">Rcpp::rgamma(int n, double shape, double scale)</code><br />
 	<code class="language-plaintext highlighter-rouge">R::dgamma(double x, double shape, double scale, int logical)</code> : the 4th parameter control if output should be <em>log</em> transformed.</li>
</ul>

<h5 id="exponential-distribution">Exponential distribution</h5>
<ul>
  <li><code class="language-plaintext highlighter-rouge">R::rexp( double r )</code> : for generating one exponential random variable
  <code class="language-plaintext highlighter-rouge">Rcpp::rexp( int n, double r)</code> : for generating an array of exponential numbers</li>
</ul>

<h2 id="frequently-used-functions">Frequently used functions</h2>
<ul>
  <li>
    <p>Type convertion:<br />
  <code class="language-plaintext highlighter-rouge">wrap()</code> :  a templated function that transforms an arbitrary object into a <em>SEXP</em>, that can be returned to R. <br />
  eg:<br />
  <code class="language-plaintext highlighter-rouge">NumericVector x= wrap(seq(1,n))</code></p>
  </li>
  <li>
    <p>Console output:</p>
  </li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="c1">// Console output:</span>
<span class="n">Rcout</span> <span class="o">&lt;&lt;</span> <span class="s">"Some message"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>  
<span class="n">Rcerr</span> <span class="o">&lt;&lt;</span> <span class="s">"Error message"</span> <span class="p">;</span>  
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>R <em>any()</em> equivalent:</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>  <span class="n">bool</span> <span class="nf">any_cpp</span><span class="p">(</span><span class="n">LogicalVector</span> <span class="n">lv</span><span class="p">)</span>
  <span class="p">{</span><span class="k">return</span> <span class="n">is_true</span><span class="p">(</span><span class="n">any</span><span class="p">(</span><span class="n">lv</span><span class="p">));}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>
    <p>R <em>seq()</em> equivalent:<br />
<code class="language-plaintext highlighter-rouge">seq(int start,int end)</code> , itâ€™s the same as R <code class="language-plaintext highlighter-rouge">seq( , ,by=1)</code>. The return type is <em>Rcpp::Range</em>, need to use <code class="language-plaintext highlighter-rouge">wrap()</code> function to make it a NumericVector.</p>
  </li>
  <li>
    <p>R <em>sample()</em>:<br />
For simple cases, we can adapt from <code class="language-plaintext highlighter-rouge">R::runif()</code> to achieve our goal. <br />
 For example, when we want to sample one integer from <code class="language-plaintext highlighter-rouge">c(a:b)</code>, we can do <code class="language-plaintext highlighter-rouge">int out=R::runif(a,b+1)</code>.</p>
  </li>
</ul>

<p>There is an equivalent <code class="language-plaintext highlighter-rouge">sample</code> function in <code class="language-plaintext highlighter-rouge">&lt;sample.h&gt;</code> file. To use it, we need to first <code class="language-plaintext highlighter-rouge">#include &lt;RcppArmadilloExtensions/sample.h&gt;</code> and follow the syntax: <br />
 <code class="language-plaintext highlighter-rouge">Rcpp::RcppArmadillo::sample(sample_set,int size, bool replacement, weight_vec)</code>.</p>

<p>See <a href="http://stackoverflow.com/questions/26384959/rcpp-r-sample-equivalent-from-a-numericvector">stackoverflow:sample</a>.</p>

<ul>
  <li><em>max()</em>  equivalent:<br />
  <code class="language-plaintext highlighter-rouge">max( obj )</code> : obj can be <em>NumericVector</em></li>
</ul>

<h2 id="others">Others</h2>
<ul>
  <li>To use C++11 features, such as <em>range based for</em>, and more ways of variable initialization, include</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>//[[Rcpp::plugins("cpp11")]]
</pre></td></tr></tbody></table></code></pre></div></div>
<p>in <em>.cpp</em> source file comments.</p>

<ul>
  <li><em>Rcpp</em> functions take inputs from <em>R</em>, and <em>R</em> doesnâ€™t have variable type <em>pointer</em>, thus when writing <em>Rcpp</em> functions we are not supposed to use pointers as input variable. <br />
 If you donâ€™t want the function to make a copy of your variable, you can specify the variable as e.g. <code class="language-plaintext highlighter-rouge">void my_fun(int &amp;var){}</code>, i.e.  passing a reference to the variable instead.</li>
</ul>
:ET